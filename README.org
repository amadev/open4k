* Open4k

A tool for managing OpenStack resources via Kubernetes API

** Why is it needed?

- With Open4k, you have a central point of management of all resources. Both Kubernetes and
  OpenStack resources are managed the same way. It can be either
  kubectl or Kubertetes Dashboard or any other available tool.
- No extra learning of OpenStack management ecosystem like OpenStack client or Heat.
- Reconcile logic for VM based on Kubertetes controller.
- Multiple cloud management in one namespace. Multiple namespaces for managing cluster of clouds.

** Installation

#+BEGIN_SRC sh
kubectl apply -f https://raw.githubusercontent.com/amadev/open4k/master/config/install.yaml
#+END_SRC

** How to use?

*** Create client configuration for the clouds you want to manage

#+BEGIN_SRC text
apiVersion: v1
kind: Secret
metadata:
  name: open4k
type: Opaque
stringData:
  config.yaml: |
    clouds:
      devstack:
        project_domain_id: default
        region_name: RegionOne
        user_domain_name: Default
        project_name: admin
        identity_api_version: 3
        interface: public
        auth:
          username: admin
          password: stack
          auth_url: http://172.18.237.203/identity
#+END_SRC

*** Creates resources as usual

#+BEGIN_SRC text
apiVersion: open4k.amadev.ru/v1alpha1
kind: Flavor
metadata:
  name: myflavor
spec:
  cloud: devstack
  body:
    flavor:
      name: myflavor
      ram: 256
      vcpus: 1
      disk: 1
#+END_SRC

#+BEGIN_SRC text
apiVersion: open4k.amadev.ru/v1alpha1
kind: Instance
metadata:
  name: vm1
spec:
  cloud: devstack
  body:
    server:
      name: vm1
      imageRef : 70a599e0-31e7-49b7-b260-868f441e862b
      flavorRef : 1
#+END_SRC

*** Import existing OpenStack resources with import_resource command or job if needed

*** Configure additional param for Kubernetes object if needed
  - cloud (string) - in what cloud resource created
  - api_version  (string) - OpenStack API version
  - managed (bool) - if it's created from Kubernetes or just imported
  - reconcile (bool) - recreate resource if it was deleted/failed.

**  How is it implemented?

The main idea is to have a minimal overhead over OS API, so the source
of info is OS API docs and API ref plus knowledge of how to work with
Kubernetes resources.  Open4K contains two parts os-sdk-light and
api-mapper.
- OpenStack services don't have a well defined API schema for automatic parsing.
  The Main source of truth is api-ref that is not easily parsable
  especially for API version related things. os-sdk-light is a very
  light OpenStack client with OpenAPI schema. It authorizes OpenStack
  identity service and use Bravado library to generate and validate
  requests and responses.  The API schema is semi-manually generated
  on a per API version basis.
- api-mapper - is a code generation tool that merges Kubernetes objects and OpenStack API together.
  Default behavior is translation of Kubernetes CRUD requests to
  OpenStack API requests, but it can be totally redefined or modified
  with hooks. For example, an image object uses a post_create hook to
  download a file from the specified URL.
