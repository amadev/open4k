#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'keystone' %}
{%- set keystone_keycloak = spec.get('features', {}).get('keystone', {}).get('keycloak', {}) %}
{%- set keystone_domain_specific_config = spec.get('features', {}).get('keystone', {}).get('domain_specific_configuration', {}) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}

spec:
  releases:
  - name: openstack-keystone
    chart: {{spec.common.openstack.repo}}/keystone
    values:
      images:
        tags:
{%- for image in [
    "keystone_domain_manage",
    "keystone_federations_create",
    "db_drop",
    "image_repo_sync",
    "db_init",
    "keystone_api",
    "keystone_credential_cleanup",
    "dep_check",
    "keystone_credential_rotate",
    "keystone_fernet_rotate",
    "ks_user",
    "keystone_fernet_setup",
    "bootstrap",
    "keystone_credential_setup",
    "keystone_db_sync",
    "keystone_db_sync_expand",
    "keystone_db_sync_migrate",
    "keystone_db_sync_contract",
    "keystone_client",
    "rabbit_init",
    "test",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
{%- if keystone_keycloak.get('enabled', False) %}
      network:
        api:
          ingress:
            annotations:
              nginx.ingress.kubernetes.io/affinity: cookie
              nginx.ingress.kubernetes.io/session-cookie-expires: "1800"
              nginx.ingress.kubernetes.io/session-cookie-max-age: "1800"
              nginx.ingress.kubernetes.io/session-cookie-name: os-keycloak-sso
{%- endif %}
      conf:
{%- if keystone_keycloak.get('enabled', False) %}
        ks_federations:
          oidc:
            domain:
              name: keycloak
            identity_provider:
              remote_ids:
                - "{{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam")}}"
              id: keycloak
              domain_id: keycloak
            mapping:
              id: "keycloak_mapping"
              rules:
                - local:
                    - user:
                        name: "{0}"
                        email: "{1}"
                        domain:
                          name: "Default"
                    - groups: "{2}"
                      domain:
                         name: "Default"
                    - domain:
                         name: "Default"
                  remote:
                    - type: "OIDC-iam_username"
                    - type: "OIDC-email"
                    - type: "OIDC-iam_roles"
            protocol:
              mapped:
                idp_id: "keycloak"
                mapping_id: "keycloak_mapping"
{%- endif %}
{%- if keystone_domain_specific_config.get("enabled", False) %}
        ks_domains:
{%- for domain in keystone_domain_specific_config.get('domains', []) %}
  {%- if domain.get('enabled', True) %}
          {{ domain.name }}: {{ domain.config }}
  {%- endif %}
{%- endfor %}
{%- endif %}
        logging:
          logger_keystone:
            level: {{ spec.get('features', {}).get('logging', {}).get('keystone', {}).get('level', 'INFO') }}
            propagate: 0
        keystone:
          cache:
            backend: oslo_cache.memcache_pool
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
{%- if keystone_domain_specific_config.get("enabled", False) %}
          identity:
            driver: sql
            default_domain_id: default
            domain_specific_drivers_enabled: True
            domain_config_dir: /etc/keystonedomains
{%- endif %}
{%- if keystone_keycloak.get('enabled', False) %}
          federation:
            # TODO: move this logic to keystone helm chart
            trusted_dashboard: "https://horizon.{{ spec.public_domain_name }}/auth/websso/"
            remote_id_attribute: HTTP_OIDC_ISS
          mapped:
            remote_id_attribute: HTTP_OIDC_ISS
          auth:
            methods: password,token,mapped
{%- endif %}
        wsgi_keystone: |
          {%- raw %}
          {{- $portInt := tuple "identity" "internal" "api" $ | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
          {{- $keystoneHost := tuple "identity" "public" . | include "helm-toolkit.endpoints.hostname_fqdn_endpoint_lookup" }}
          {{- $keystoneProtocol := tuple "identity" "public" "api" . | include "helm-toolkit.endpoints.keystone_endpoint_scheme_lookup" }}
          Listen 0.0.0.0:{{ $portInt }}
          {%- endraw %}
          LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
          LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy
          SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
          CustomLog /dev/stdout combined env=!forwarded
          CustomLog /dev/stdout proxy env=forwarded
          <VirtualHost *:{% raw %}{{ $portInt }}{% endraw %}>
              WSGIDaemonProcess keystone-public processes=8 threads=1 user=keystone group=keystone display-name=%{GROUP}
              WSGIProcessGroup keystone-public
              WSGIScriptAlias / /var/www/cgi-bin/keystone/keystone-wsgi-public
              WSGIApplicationGroup %{GLOBAL}
              WSGIPassAuthorization On
              ServerSignature Off
              TraceEnable Off
              <IfVersion >= 2.4>
                 ErrorLogFormat "%{cu}t %M"
              </IfVersion>
              ErrorLog /dev/stdout
              SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded proxy env=forwarded
{%- if keystone_keycloak.get('enabled', False) %}
              OIDCClaimPrefix "OIDC-"
              OIDCResponseType "id_token"
              OIDCScope "openid email profile"
              OIDCProviderMetadataURL {{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam/.well-known/openid-configuration")}}
              OIDCOAuthVerifyJwksUri {{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam/protocol/openid-connect/certs")}}
              OIDCClientID {{ keystone_keycloak.get('oidc', {}).get('OIDCClientID', "os") }}
              OIDCCryptoPassphrase {{ oidc_crypto_passphrase }}
              OIDCSSLValidateServer {% if keystone_keycloak.get('oidc',{}).get('OIDCSSLValidateServer', true) %}On{%- else %}Off{%- endif %}
              OIDCOAuthSSLValidateServer {% if keystone_keycloak.get('oidc',{}).get('OIDCOAuthSSLValidateServer', true) %}On{%- else %}Off{%- endif %}
              {%- if keystone_keycloak.get('oidc', {}).get('OIDCRedirectURI', []) %}
              {%- for uri in keystone_keycloak.oidc.OIDCRedirectURI %}
              OIDCRedirectURI {{ uri }}
              {%- endfor %}
              {%- else %}
              {%- raw %}
              OIDCRedirectURI {{ $keystoneProtocol }}://{{ $keystoneHost }}/v3/OS-FEDERATION/identity_providers/keycloak/protocols/mapped/auth
              OIDCRedirectURI {{ $keystoneProtocol }}://{{ $keystoneHost }}/v3/auth/OS-FEDERATION/websso/
              OIDCRedirectURI {{ $keystoneProtocol }}://{{ $keystoneHost }}/v3/auth/OS-FEDERATION/identity_providers/keycloak/protocols/mapped/websso/
              {%- endraw %}
              {%- endif %}
              <LocationMatch /v3/OS-FEDERATION/identity_providers/.*?/protocols/.*?/auth>
                  AuthType oauth20
                  Require valid-user
                  LogLevel debug
              </LocationMatch>
              <Location ~ "/v3/auth/OS-FEDERATION/websso/mapped">
                  AuthType openid-connect
                  Require valid-user
                  LogLevel debug
              </Location>
              <Location ~ "/v3/auth/OS-FEDERATION/identity_providers/keycloak/protocols/mapped/websso">
                  AuthType openid-connect
                  Require valid-user
                  LogLevel debug
              </Location>
{%- endif %}
              </VirtualHost>
      manifests:
        network_policy: false
{%- if keystone_keycloak.get('enabled', False) %}
        job_federations_create: true
{%- endif %}
        job_rabbit_init: false
        secret_ca_bundle: true
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_messaging_shared.yaml' %}
{% include 'base/_admin_identity.yaml' %}
          host_fqdn_override:
            public:
              host: keystone.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: keystone-api
            default: keystone
            internal: keystone-api
            public:
              host: keystone
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 5000
              default: 80
              internal: 5000
              public: 443
          scheme:
            default: http
            public: https
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            keystone:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{% include 'base/_notifications.yaml' %}
