#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'glance' %}
{%- set components_with_dedicated_messaging = spec.get('features', {}).get('messaging', {}).get('components_with_dedicated_messaging', []) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}

spec:
  releases:
{%- if 'image' in components_with_dedicated_messaging %}
  - name: openstack-glance-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_messaging_dedicated.yaml' %}
      conf:
        users:
          glance:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path: /glance
        aux_conf:
          policies:
          - vhost: glance
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
          - vhost: glance
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: glance
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
{%- endif %}
{%- if spec.get('migration', {}).get('glance', {}).get('deploy_main_service', True) %}
  - name: openstack-glance
    chart: {{spec.common.openstack.repo}}/glance
    values:
      images:
        tags:
{%- for image in [
    "ks_service",
    "db_drop",
    "image_repo_sync",
    "bootstrap",
    "glance_db_sync",
    "glance_db_expand",
    "glance_db_migrate",
    "glance_db_contract",
    "glance_storage_init",
    "ks_endpoints",
    "rabbit_init",
    "glance_api",
    "db_init",
    "dep_check",
    "test",
    "glance_registry",
    "glance_metadefs_load",
    "ks_user",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      pod:
        replicas:
          api: 1
          registry: 1
      storage: rbd
      bootstrap:
        enabled: true
        ks_user: admin
        structured:
          images:
            cirros:
              container_format: bare
              image_file: cirros-0.5.1-x86_64-disk.img
              image_type: qcow2
              min_disk: 1
              name: Cirros-5.1
              private: false
              properties:
                os_distro: cirros
              source_url: {{ spec.artifacts.binary_base_url }}/openstack/bin/cirros/0.5.1/
            fedora:
              container_format: bare
              image_file: Fedora-Cloud-Base-27-1.6.x86_64.qcow2
              image_type: qcow2
              min_disk: 1
              name: Fedora-27-1.6
              private: false
              properties:
                os_distro: fedora
              source_url: {{ spec.artifacts.binary_base_url }}/openstack/bin/Fedora/27/
            ubuntu:
              container_format: bare
              image_file: bionic-server-cloudimg-amd64.img
              image_type: qcow2
              min_disk: 1
              name: Ubuntu-18.04
              private: false
              properties:
                os_distro: ubuntu
              source_url: {{ spec.artifacts.binary_base_url }}/openstack/bin/ubuntu/18.04/
      conf:
        glance:
          cors:
            allow_headers: Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma,X-Custom-Header,X-Auth-Token
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials.memcached }}
          DEFAULT:
            enable_v1_api: True
            enable_v2_registry: True
            # show_multiple_locations is set True because of the fact that glance uses always
            # Ceph as backend. The parameter exposes additional information about the images
            # but this information doesn't exist any sensitive data there are UUIDs and pool name.
            show_multiple_locations: True
          glance_store:
{%- for pools, pools_config in ceph.glance.pools.items() %}
            rbd_store_pool: {{ pools_config.name }}
{%- endfor %}
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
        glance_registry:
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials.memcached }}
        logging:
          logger_glance:
            level: {{ spec.get('features', {}).get('logging', {}).get('glance', {}).get('level', 'INFO') }}
            propagate: 0
      volume:
        class_name: rook-ceph-block
        size: 2Gi
      ceph_client:
        configmap: rook-ceph-config
        user_secret_name: {{ ceph.glance.secrets }}
      secrets:
        rbd: {{ ceph.glance.secrets }}
      manifests:
        network_policy: false
        job_rabbit_init: false
        job_storage_init: false
        secret_ca_bundle: true
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            glance:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if 'image' in components_with_dedicated_messaging %}
{% include 'base/_messaging_dedicated.yaml' %}
{%- else %}
{% include 'base/_messaging_shared.yaml' %}
{%- endif %}
{% include 'base/_notifications.yaml' %}
        image:
          host_fqdn_override:
            public:
              host: glance.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: glance-api
            default: glance
            internal: glance-api
            public:
              host: glance
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 9292
              default: 80
              internal: 9292
              public: 443
          scheme:
            default: http
            public: https
        # NOTE(vsaienko): the horizon endpoint is needed to generate correct cors:allowed_origins
        dashboard:
          host_fqdn_override:
            public:
              host: horizon.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            default: horizon-int
            public:
              host: horizon
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
      jobs:
{% include 'base/_ks_jobs.yaml' %}
{%- endif %}
