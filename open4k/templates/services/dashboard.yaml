#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set keystone_keycloak = spec.get('features', {}).get('keystone', {}).get('keycloak', {}) %}
{%- set keystone_keycloak_enabled = keystone_keycloak.get('enabled', False) %}
{%- set horizon_features = spec.get('features', {}).get('horizon', {}) %}
{%- set neutron_backend = spec.features.neutron.get('backend', 'ml2') %}
#TODO: remove extra_panels when https://mirantis.jira.com/browse/PRODX-3037 is fixed
#The list of extra panels in Horizon helm-chart is overwritten in case 'extra_panels' is defined in openstack-controller.
{%- set horizon_extra_panels = ['neutron_taas_dashboard', 'heat_dashboard', 'tf_dashboard'] %}
{%- if 'load-balancer' in spec.features.services %}
  {%- do horizon_extra_panels.append('octavia_dashboard') %}
{%- endif %}
{%- if 'dns' in spec.features.services %}
  {%- do horizon_extra_panels.append('designatedashboard') %}
{%- endif %}

spec:
  releases:
  - name: openstack-horizon
    chart: {{spec.common.openstack.repo}}/horizon
    values:
      images:
        tags:
{%- for image in [
    "horizon_db_sync",
    "db_init",
    "db_drop",
    "horizon",
    "image_repo_sync",
    "test",
    "dep_check",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      manifests:
        network_policy: false
        secret_ca_bundle: true
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
# Keycloak-related Identity service configuration
{%- if keystone_keycloak_enabled %}
        identity:
          host_fqdn_override:
            default: keystone.{{ spec.public_domain_name }}
          scheme: https
          path:
            default: /v3
          port:
            api:
              internal: 443
{%- endif %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            horizon:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
        dashboard:
          host_fqdn_override:
            public:
              host: horizon.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            default: horizon-int
            public:
              host: horizon
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
      conf:
        horizon:
          {%- if keystone_keycloak_enabled %}
          openstack_clouds_yaml_custom_template:
            template: |
              {%- raw %}
              # This is a clouds.yaml file, which can be used by OpenStack tools as a source
              # of configuration on how to connect to a cloud. If this is your only cloud,
              # just put this file in ~/.config/openstack/clouds.yaml and tools like
              # python-openstackclient will just work with no further config. (You will need
              # to add your password to the auth section)
              # If you have more than one cloud account, add the cloud entry to the clouds
              # section of your existing file and you can refer to them by name with
              # OS_CLOUD={{ "{{" }} cloud_name {{ "}}" }} or --os-cloud={{ "{{" }} cloud_name {{ "}}" }}
              clouds:
                {{ "{{" }} cloud_name {{ "}}" }}:
                  {% if profile %}
                  profile: {{ "{{" }} profile {{ "}}" }}
                  {% endif %}
                  auth:
                    {% if not profile %}
                    auth_url: {{ "{{" }} auth_url {{ "}}" }}
                    {% endif %}
                    username: "{{ "{{" }} user.username {{ "}}" }}"
                    project_id: {{ "{{" }} tenant_id {{ "}}" }}
                    project_name: "{{ "{{" }} tenant_name {{ "}}" }}"
                    project_domain_id: {{ "{{" }} tenant_id {{ "}}" }}
                    {% if user_domain_name and auth_type != 'mapped' %}
                    user_domain_name: "{{ "{{" }} user_domain_name {{ "}}" }}"
                    {%  endif %}
                    {% if auth_type == 'mapped' %}
                    identity_provider: keycloak
                    {% endif %}
                  {% if not profile %}
                    {% if regions %}
                  regions:
                      {% for r in regions %}
                  - {{ "{{" }} r {{ "}}" }}
                      {% endfor %}
                    {% else %}
                      {% if region %}
                  region_name: "{{ "{{" }} region {{ "}}" }}"
                      {% endif %}
                    {% endif %}
                  interface: "{{ "{{" }} interface {{ "}}" }}"
                  identity_api_version: {{ "{{" }} os_identity_api_version {{ "}}" }}
                  {% endif %}
                  {% if auth_type == 'mapped' %}
              {%- endraw %}
                  client_secret: someRandomClientSecretMightBeNull
                  protocol: mapped
                  openid_scope: openid
                  token_endpoint: {{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam/protocol/openid-connect/token")}}
                  client_id: os
                  discovery_endpoint: {{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam/.well-known/openid-configuration")}}
                  auth_type: v3oidcpassword
              {%- raw %}
                  {% endif %}
              {%- endraw %}
          openrc_custom_template:
            template: |
              {%- raw %}
              {% load shellfilter %}#!/usr/bin/env bash

              # To use an OpenStack cloud you need to authenticate against the Identity
              # service named keystone, which returns a **Token** and **Service Catalog**.
              # The catalog contains the endpoints for all services the user/tenant has
              # access to - such as Compute, Image Service, Identity, Object Storage, Block
              # Storage, and Networking (code-named nova, glance, keystone, swift,
              # cinder, and neutron).
              #
              # *NOTE*: Using the 3 *Identity API* does not necessarily mean any other
              # OpenStack API is version 3. For example, your cloud provider may implement
              # Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
              # only for the Identity API served through keystone.
              export OS_AUTH_URL={{ "{{" }} auth_url {{ "}}" }}

              # With the addition of Keystone we have standardized on the term **project**
              # as the entity that owns the resources.
              {% if auth_type != 'mapped' %}
              export OS_PROJECT_ID={{ "{{" }} tenant_id {{ "}}" }}
              export OS_USER_DOMAIN_NAME="{{ "{{" }} user_domain_name|shellfilter {{ "}}" }}"
              if [ -z "$OS_USER_DOMAIN_NAME" ]; then unset OS_USER_DOMAIN_NAME; fi
              {% endif %}
              export OS_PROJECT_NAME="{{ "{{" }} tenant_name|shellfilter {{ "}}" }}"
              export OS_PROJECT_DOMAIN_ID="{{ "{{" }} project_domain_id|shellfilter {{ "}}" }}"
              if [ -z "$OS_PROJECT_DOMAIN_ID" ]; then unset OS_PROJECT_DOMAIN_ID; fi

              # unset v2.0 items in case set
              unset OS_TENANT_ID
              unset OS_TENANT_NAME

              # In addition to the owning entity (tenant), OpenStack stores the entity
              # performing the action as the **user**.
              export OS_USERNAME="{{ "{{" }} user.username|shellfilter {{ "}}" }}"

              # With Keystone you pass the keystone password.
              echo "Please enter your OpenStack Password for project $OS_PROJECT_NAME as user $OS_USERNAME: "
              read -sr OS_PASSWORD_INPUT
              export OS_PASSWORD=$OS_PASSWORD_INPUT
              # If your configuration has multiple regions, we set that information here.
              # OS_REGION_NAME is optional and only valid in certain environments.
              export OS_REGION_NAME="{{ "{{" }} region|shellfilter {{ "}}" }}"
              # Don't leave a blank variable, unset it if it was empty
              if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

              export OS_INTERFACE={{ "{{" }} interface {{ "}}" }}
              export OS_IDENTITY_API_VERSION={{ "{{" }} os_identity_api_version {{ "}}" }}


              {% if auth_type == 'mapped' %}
              {%- endraw %}
              export OS_CLIENT_SECRET=someRandomClientSecretMightBeNull
              export OS_PROTOCOL=mapped
              export OS_OPENID_SCOPE=openid
              export OS_TOKEN_ENDPOINT={{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam/protocol/openid-connect/token")}}
              export OS_CLIENT_ID=os
              export OS_DISCOVERY_ENDPOINT={{ keystone_keycloak.get('oidc', {}).get('OIDCProviderMetadataURL', keystone_keycloak.url + "/auth/realms/iam/.well-known/openid-configuration")}}
              export OS_AUTH_TYPE=v3oidcpassword
              export OS_IDENTITY_PROVIDER=keycloak
              {%- raw %}
              {% endif %}
              {%- endraw %}
          {%- endif %}
          extra_panels: {{ horizon_extra_panels }}
          local_settings:
            custom_themes:
{%- set horizon_themes = horizon_features.get('themes', []) %}
{%- if spec.openstack_version not in ['queens', 'rocky', 'stein', 'train'] %}
{%- do horizon_themes.append({'url': images["horizon_mirantis_theme_url"],
                              'name': 'mirantis',
                              'description': 'Mirantis',
                              'sha256summ': images["horizon_mirantis_theme_sha256summ"]
                             }) %}
{%- endif %}
{%- for theme in horizon_themes %}
              {{ theme.name }}:
                url: {{ theme.url }}
                sha256summ: {{ theme.sha256summ }}
                description: {{ theme.description }}
{%- endfor %}
            config:
              raw:
                DEFAULT_THEME: {{ horizon_features.get('default_theme', 'default') }}
              horizon_secret_key: {{ credentials.secret_key }}

              horizon_images_upload_mode: 'direct'
              secure_proxy_ssl_header: true
{%- if keystone_keycloak_enabled %}
              auth:
                idp_mapping:
                - idp: keycloak
                  label: External Authentication Service
                  name: mapped
                  protocol: mapped
                sso:
                  enabled: true
                  initial_choice: mapped
{%- endif %}
              tungstenfabric:
                enabled: {{ neutron_backend == 'tungstenfabric' }}
