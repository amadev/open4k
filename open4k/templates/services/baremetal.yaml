#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'ironic' %}
{%- set components_with_dedicated_messaging = spec.get('features', {}).get('messaging', {}).get('components_with_dedicated_messaging', []) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}
{%- set enabled_boot_interfaces = ['pxe', 'fake'] %}
{%- if spec.openstack_version not in ['queens', 'rocky'] %}
{%- do enabled_boot_interfaces.append('ipxe') %}
{%- endif %}
{%- set network = spec.features.ironic.networks.baremetal %}

spec:
  releases:
{%- if 'baremetal' in components_with_dedicated_messaging %}
  - name: openstack-ironic-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_messaging_dedicated.yaml' %}
      conf:
        users:
          ironic:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path: /ironic
        aux_conf:
          policies:
          - vhost: ironic
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
          - vhost: ironic
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: ironic
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
{%- endif %}
{%- if spec.get('migration', {}).get('ironic', {}).get('deploy_main_service', True) %}
  - name: openstack-ironic
    chart: {{spec.common.openstack.repo}}/ironic
    values:
      images:
        tags:
{%- for image in [
    "ironic_manage_networks",
    "ironic_retrieve_networks",
    "ironic_retrieve_swift_config",
    "bootstrap",
    "db_drop",
    "db_init",
    "ironic_db_sync",
    "ks_user",
    "ks_service",
    "ks_endpoints",
    "rabbit_init",
    "ironic_api",
    "ironic_conductor",
    "ironic_pxe",
    "ironic_pxe_init",
    "ironic_pxe_http",
    "dep_check",
    "image_repo_sync",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      manifests:
        network_policy: false
        job_rabbit_init: false
        secret_ca_bundle: true
      bootstrap:
        object_store:
          enabled: false
        image:
          {%- set agent_images = spec.features.ironic.get('agent_images', {}) %}
          source_base: {{ agent_images.get('base_url', spec.artifacts.binary_base_url ~ '/openstack/bin/ironic/tinyipa') }}
          structured:
            ironic-agent.initramfs:
              source:  {{ agent_images.get('initramfs', 'tinyipa-stable-' ~ spec.openstack_version ~ '.gz') }}
            ironic-agent.kernel:
              source:  {{ agent_images.get('kernel', 'tinyipa-stable-' ~ spec.openstack_version ~ '.vmlinuz') }}
      network:
        cleaning: &bm_network
          name: {{ network.get('name', 'baremetal') }}
          physnet: {{ network.get('physnet', 'ironic') }}
          network_type: {{ network.get('network_type', 'vlan') }}
          external: {{ network.get('external', true) }}
          shared: {{ network.get('shared', true) }}
          {%- if network.mtu is defined %}
          mtu: {{ network.mtu }}
          {%- endif %}
          subnets:
          {%- for bm_subnet in network.subnets %}
            {{ bm_subnet.name }}:
              name: "{{ bm_subnet.name }}"
              ip_version: 4
              range: {{ bm_subnet.range }}
              pool_start: {{ bm_subnet.pool_start }}
              pool_end: {{ bm_subnet.pool_end }}
              gateway: {{ bm_subnet.gateway }}
              {%- if spec.get('features', {}).get('neutron', {}).get('dns_servers', []) %}
              nameservers: {{ spec.features.neutron.dns_servers }}
              {%- endif %}
          {%- endfor %}
        provisioning: *bm_network
        pxe:
          device: {{ spec.get('features', {}).get('ironic', {}).get('provisioning_interface', 'ironic-pxe') }}
          convert_cleaning_network_name_to_uuid: false
      conf:
        ironic:
          DEFAULT:
            enabled_hardware_types: ipmi,fake-hardware
            enabled_boot_interfaces: {{ enabled_boot_interfaces|join(',') }}
            {%- if 'ipxe' in enabled_boot_interfaces %}
            # NOTE(vsaienko): we prefer to use chainloading to ipxe as it is much faster and stable
            # for file downloads that UDP based pxe
            default_boot_interface: ipxe
            {%- endif %}
            enabled_management_interfaces: fake,ipmitool,noop
            enabled_power_interfaces: fake,ipmitool
            enabled_network_interfaces: flat,neutron,noop
            enabled_deploy_interfaces: fake,direct
            # NOTE(vsaienko): the cinder + ceph can't advertise ISCSI targets,
            # while ironic BFV supports only ISCSI or FiberChannel
            enabled_storage_interfaces: fake,cinder,noop
            enabled_bios_interfaces: fake,no-bios
            enabled_console_interfaces: fake,no-console
            enabled_inspect_interfaces: fake,no-inspect
            enabled_raid_interfaces: fake,agent,no-raid
            enabled_rescue_interfaces: fake,no-rescue
            enabled_vendor_interfaces: fake,ipmitool,no-vendor
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
          conductor:
            automated_clean: true
          pxe:
            pxe_append_params: nofb nomodeset vga=normal ipa-insecure=1 ipa-debug=1
          agent:
            image_download_source: http
          deploy:
            erase_devices_priority: 0
            erase_devices_metadata_priority: 1
            shred_final_overwrite_with_zeros: false
            default_boot_option: local
            fast_track: false
          neutron:
            port_setup_delay: 30
            cleaning_network: {{ network.get('name', 'baremetal') }}
            provisioning_network: {{ network.get('name', 'baremetal') }}
        logging:
          logger_ironic:
            level: {{ spec.get('features', {}).get('logging', {}).get('ironic', {}).get('level', 'INFO') }}
            propagate: 0
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            ironic:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if 'baremetal' in components_with_dedicated_messaging %}
{% include 'base/_messaging_dedicated.yaml' %}
{%- else %}
{% include 'base/_messaging_shared.yaml' %}
{%- endif %}
{% include 'base/_notifications.yaml' %}
        baremetal:
          host_fqdn_override:
            public:
              host: ironic.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent(width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent(width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent(width=18, first=True) }}
          hosts:
            default: ironic
            internal: ironic-api
            public:
              host: ironic
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent(width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent(width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent(width=18, first=True) }}
          port:
            api:
              default: 80
              internal: 6385
              public: 443
          scheme:
            default: http
            public: https
      jobs:
{% include 'base/_ks_jobs.yaml' %}
{%- endif %}
