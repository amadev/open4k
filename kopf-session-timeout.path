commit f7ee6183318eb3ea1e2b91bc361b730d6dd389b9
Author: Vasyl Saienko <vsaienko@mirantis.com>
Date:   Wed Jun 24 10:24:41 2020 +0000

    Configure session timeous globally
    
    Previously timeouts were configured only for watching requests, this patch
    make them configured directly in session constructor.

diff --git a/kopf/clients/auth.py b/kopf/clients/auth.py
index c00716d..5610a6e 100644
--- a/kopf/clients/auth.py
+++ b/kopf/clients/auth.py
@@ -10,6 +10,7 @@ from typing import Optional, Callable, Any, TypeVar, Dict, Iterator, Mapping, ca
 
 import aiohttp
 
+from kopf.structs import configuration
 from kopf.structs import credentials
 
 # Per-operator storage and exchange point for authentication methods.
@@ -120,6 +121,8 @@ class APIContext:
 
         # Some SSL data are not accepted directly, so we have to use temp files.
         tempfiles = _TempFiles()
+        settings = configuration.OperatorSettings()
+
         ca_path: Optional[str]
         certificate_path: Optional[str]
         private_key_path: Optional[str]
@@ -195,6 +198,12 @@ class APIContext:
             ),
             headers=headers,
             auth=auth,
+            timeout=aiohttp.ClientTimeout(
+                total=settings.session.total_timeout,
+                sock_connect=settings.session.sock_connect_timeout,
+                sock_read=settings.session.sock_read_timeout,
+                connect=settings.session.connect_timeout
+            ),
         )
 
         # Add the extra payload information. We avoid overriding the constructor.
diff --git a/kopf/structs/configuration.py b/kopf/structs/configuration.py
index b06bfa8..71eb4f6 100644
--- a/kopf/structs/configuration.py
+++ b/kopf/structs/configuration.py
@@ -91,6 +91,31 @@ class WatchingSettings:
 
 
 @dataclasses.dataclass
+class SessionSettings:
+
+    total_timeout: Optional[float] = 1 * 600
+    """
+    An HTTP/HTTPS session Total timeout for the whole request.
+    """
+
+    sock_connect_timeout: Optional[float] = 1 * 60
+    """
+    An HTTP/HTTPS session timeout for connecting to a peer for a new connection,
+    not given from a pool. See also connect.
+    """
+
+    sock_read_timeout: Optional[float] = 1 * 60
+    """
+    An HTTP/HTTPS session timeout for reading a portion of data from a peer.
+    """
+
+    connect_timeout: Optional[float] = 1 * 60
+    """
+    An HTTP/HTTPS session timeout for acquiring a connection from pool.
+    """
+
+
+@dataclasses.dataclass
 class BatchingSettings:
     """
     Settings for how raw events are batched and processed.
@@ -248,6 +273,7 @@ class BackgroundSettings:
 class OperatorSettings:
     logging: LoggingSettings = dataclasses.field(default_factory=LoggingSettings)
     posting: PostingSettings = dataclasses.field(default_factory=PostingSettings)
+    session: SessionSettings = dataclasses.field(default_factory=SessionSettings)
     watching: WatchingSettings = dataclasses.field(default_factory=WatchingSettings)
     batching: BatchingSettings = dataclasses.field(default_factory=BatchingSettings)
     execution: ExecutionSettings = dataclasses.field(default_factory=ExecutionSettings)
